================
Further Analysis
================

Custom bonds
============

Custom bonds can be analyzed too. The Jedi package has a function to determine hydrogen bonds in a structure. These will be added to the RIC with add_custom_bonds() after generating the Jedi object. 

.. code-block:: python
    
    import ase.io
    from ase.vibrations.vibrations import VibrationsData
    import numpy as np
    from jedi.jedi import Jedi


    mol=ase.io.read('opt.json')
    mol2=ase.io.read('dis.json')
    modes=VibrationsData.read('modes.json')
    j=Jedi(mol,mol2,modes)
    j.add_custom_bonds(get_hbonds(mol))
    
    j.run()
    j.vmd_gen()

The visualization should look like following picture.

.. image:: hcn/hcnhbond.png
    :width: 20%

.. image:: hcn/hcnhbondbar.png
    :width: 10%

Other types of interactions that can be localized between two atoms can added on the same way by giving a 2D array to the add_custom_bonds function. 

Analysis of a Substructure
==========================

From the above we can get an analysis of only a part of the structure by giving the indeices of the desired atoms

.. code-block:: python

    j.run(indices=[12,17,14,18,23,20,16,15,13,22,21,19,0,5,2,6,11,8,4,3,1,10,9,7])
    j.vmd_gen()

.. image:: hcn/hcnparthbond.png
    :width: 20%

.. image:: hcn/hcnhbondbar.png
    :width: 10%

Or using a Hessian calculated for only the substructure with:

.. code-block:: python
    
    modes=VibrationsData.from_2d(mol,np.loadtxt('partH'),indices=[12,17,14,18,23,20,16,15,13,22,21,19,0,5,2,6,11,8,4,3,1,10,9,7])
    j=Jedi(mol,mol2,modes)
    j.add_custom_bonds(get_hbonds(mol))
    
    j.run()
    j.vmd_gen()

which will give similar values.


More Examples
=============

The following calculations are performed on a low level of accuracy so that they can be done by the first time user for demonstration measures. For better results, a higher accuracy is needed.

Biphenyl
--------

Getting distorted molecules can be as simple as just moving one atom and calculating the single point energy. Here, a Hydrogen atom is pulled 0.1 Ã… away from its relaxed position.

.. code-block:: python

    from ase.io import read
    from ase.build import molecule
    from ase.calculators.vasp import Vasp
    from ase.vibratrions.vibrations import VibrationsData
    from jedi.jedi import Jedi

    mol=molecule("biphenyl")
    mol.set_cell([40,20,20])
    mol.set_pbc([True,True,True])
    mol.center()

    #optimize the molecule
    label="opt"
    mol.calc=Vasp(label='%s/%s'%(label,label),prec='Accurate',
            xc='PBE',pp='PBE', nsw=0,ivdw=12,
            lreal=False,ibrion=2, isym=0,encut=450,ediff=0.00000001,isif=2,symprec=1.0e-5 ,command= "your command to start vasp jobs")
    mol.calc.write_input(mol)
    mol=ase.io.read('opt/vasprun.xml')  
    mol.get_potential_energy()
    #frequency analysis
    label="freq"
    mol.calc=Vasp(label='%s/%s'%(label,label),prec='Accurate',
            xc='PBE',pp='PBE', nsw=0,ivdw=12,
            lreal=False,ibrion=5, isym=0,encut=450,ediff=0.00000001,isif=2,symprec=1.0e-5 ,command= "your command to start vasp jobs")
    mol.get_potential_energy()
    modes=mol.calc.get_vibrations()
    #distort molecule
    mol2=mol.copy()
    v=mol2.get_distance(3,14,vector=True)
    v/=np.linalg.norm(v)
    positions=mol2.get_positions()
    positions[14]+=v*0.1
    label='para-C-H'
    mol2.set_positions(positions)
    calc = Vasp(label='%s/%s'%(label,label),prec='Accurate',
                xc='PBE',pp='PBE', nsw=0,ivdw=12,
                lreal=False,ibrion=2, isym=0,encut=450,ediff=0.00000001,isif=2,symprec=1.0e-5 ,command= "your command to start vasp jobs")
    mol2.calc=calc
    mol2.get_potential_energy()


    j=Jedi(mol,mol2,modes)
    j.run()
    j.vmd_gen()

Benzene
-------


Another way is to shrink boxes in periodic boundary conditions.

.. code-block:: python

    from ase.io import read
    from ase.build import molecule
    from ase.calculators.vasp import Vasp
    from ase.vibratrions.vibrations import VibrationsData
    from jedi.jedi import Jedi

    mol=molecule("C6H6")
    mol.set_cell=([20,20,20])
    mol.set_pbc([True,True,True])
    mol.center()
    #optimize molecule
    label='opt'
    mol.calc=Vasp(label='%s/%s'%(label,label),prec='Accurate',
            xc='PBE',pp='PBE', nsw=0,ivdw=12,
            lreal=False,ibrion=2, isym=0,encut=450,ediff=0.00001,isif=2,symprec=1.0e-5 ,command= "your command to start vasp jobs")
    mol.calc.write_input(mol)
    mol=ase.io.read('opt/vasprun.xml')  
    mol.get_potential_energy()
    #frequency analysis
    label='freq'
    mol.calc=Vasp(label='%s/%s'%(label,label),prec='Accurate',
            xc='PBE',pp='PBE', nsw=0,ivdw=12,
            lreal=False,ibrion=5, isym=0,encut=450,ediff=0.00001,isif=2,symprec=1.0e-5 ,command= "your command to start vasp jobs")
    mol.get_potential_energy()
    modes=mol.calc.get_vibrations()
    #distort molecule
    mol2=mol.copy()
    mol2.cell=[8,8,8]
    label='8_8_8'
    calc = Vasp(label='%s/%s'%(label,label),prec='Accurate',
                xc='PBE',pp='PBE', nsw=0,ivdw=12,
                lreal=False,ibrion=2, isym=0,encut=450,ediff=0.00001,isif=2,symprec=1.0e-5 ,command= "your command to start vasp jobs")
    mol2.calc=calc
    mol2.get_potential_energy()


    j=Jedi(mol,mol2,modes)
    j.run()
    j.vmd_gen(modus='all', man_strain=0.637)

    mol3=mol2.copy()
    mol3.cell=[6,6,6]
    label='6_6_6'
    calc = Vasp(label='%s/%s'%(label,label),prec='Accurate',
                xc='PBE',pp='PBE', nsw=0,ivdw=12,
                lreal=False,ibrion=2, isym=0,encut=450,ediff=0.00001,isif=2,symprec=1.0e-5 ,command= "your command to start vasp jobs")
    mol3.calc=calc
    mol3.get_potential_energy()

    j2=Jedi(mol,mol3,modes)
    j2.run()
    j2.vmd_gen(modus='all', man_strain=0.637)

For a better comparison of two seperate analyzes, one can set a reference strain energy for the coloring by using the man_strain parameter.



Using EFEI
-----------

Stretching bonds using a predefined force is possible with the EFEI method. The following example shows an ethane molecule of which the C-C bond is stretched with a force of 4 nN

.. code-block:: python

    from ase.build import molecule
    from ase.vibratrions.vibrations import VibrationsData
    from jedi.jedi import Jedi
    from jedi.io.orca import get_vibrations
    from jedi.io.orca import OrcaOptimizer, ORCA
    import ase.io
    mol=molecule('C2H6')


    calc = ORCA(label='opt',
                orcasimpleinput='pbe cc-pVDZ OPT'
                ,task='opt')
    opt=OrcaOptimizer(mol,calc)
    opt.run()

    ase.io.write('opt.json',mol)
    mol=ase.io.read('opt.json')
    mol.calc=ORCA(label='orcafreq',
                orcasimpleinput='pbe cc-pVDZ FREQ',
                task='sp')
    mol.get_potential_energy()

    modes=get_vibrations('orcafreq',mol)

    mol2=mol.copy()
    calc = ORCA(label='stretch',
                orcasimpleinput='pbe cc-pVDZ  OPT',
                orcablocks='''%geom
        POTENTIALS
            { C 0 1 4.0 }
        end 
    end ''',task='opt')
    opt=OrcaOptimizer(mol2,calc)
    opt.run()
    ase.io.write('force.json',mol)

    j=Jedi(mol,mol2,modes)
    j.run()
    j.vmd_gen()

.. image:: ethane/ethan.png
    :width: 20%

.. image:: ethane/vmd/allcolorbar.pdf
    :width: 10%

Stretching hydrogen bonds Using COGEF 
--------------------------------------

.. code-block:: python

    from ase import Atoms
    from ase.calculators.gaussian import Gaussian, GaussianOptimizer
    from ase.build import molecule
    import numpy as np
    import ase.io
    from ase.calculators.qchem import QChem
    from jedi.jedi import Jedi
    from ase.vibrations.vibrations import VibrationsData
    mol = ase.io.read('dna.xyz')

    calc = Gaussian(mem='30GB',

                        label='opt',


                        method='b3lyp',
                        basis='6-311++G*',
                        EmpiricalDispersion='GD3BJ',
                        scf='qc')
    opt=GaussianOptimizer(mol,calc)
    opt.run(fmax='tight', steps=100)


    atoms=ase.io.read('opt.json')
    atoms.calc = Gaussian(mem='10GB',
                        iop='7/33=1',
                        freq='',
                        label='freq',
                        chk='freq.chk',
                        save=None,
                        method='b3lyp',
                        basis='6-311++G*',
                        EmpiricalDispersion='GD3BJ',
                        scf='qc')
    atoms.get_potential_energy()
    modes=get_vibrations('freq',mol)

    mol2=mol.copy()
    v=mol2.get_distance(32,37)+0.1
    w=mol2.get_distance(30,38)+0.1
    x=mol2.get_distance(18,52)+0.1

    calc = Gaussian(mem='60GB',

                        label='dist',
                        extra="opt=ModRedundant",

                        method='b3lyp',
                        basis='6-311++G*',
                        EmpiricalDispersion='GD3BJ',
                        scf='qc',cons='''32 37 ={} B
    30 38 ={} B
    18 52 ={} B
    32 37 F
    30 38 F
    18 52 F'''.format(v,w,x))
    opt=GaussianOptimizer(mol2,calc)
    opt.run(fmax='tight', steps=100)

    j=Jedi(mol,mol2,modes)
    j.run()
    j.vmd_gen()


Hydrostatic Pressure using X-HCFF
---------------------------------

A lot of models have been developed to simulate pressure. X-HCFF is one of them that simulates Hydrostatic pressure. Here, Dewar and Ladenburg benzene are analyzed under 50GPa of pressure.

.. code-block:: python

    import ase.io
    from ase.calculators.qchem import QChem
    from ase.vibrations.data import VibrationsData
    from jedi.jedi import Jedi
    from ase.calculators.qchem import QChemOptimizer
    from jedi.jedi.io.qchem import get_vibrations
    mol = ase.io.read('Dewar.xyz')

    label='opt'
    
    calc=QChem(jobtype='sp',label='xhcff/50GB/%s'%(label),          method='pbe',dft_d='D3_BJ',
                 basis='cc-pvdz',GEOM_OPT_MAX_CYCLES='150',USE_LIBQINTS='1',MAX_SCF_CYCLES='150',command='your command')
    mol.calc = calc
    opt = QChemOptimizer(mol)
    opt.run()


    label='freq'
    calc=QChem(jobtype='freq',label='xhcff/50GB/%s'%(label),          method='pbe',dft_d='D3_BJ',
                 basis='cc-pvdz',vibman_print= '7',command='your command')
    mol.calc = calc
    mol.calc.calculate(properties=['hessian'],atoms=mol)

    modes=get_vibrations(label,mol)

    label='force'
    mol2=ase.io.read('%s.json'%(label))
    calc=QChem(jobtype='sp',label='xhcff/50GB/%s'%(label),          method='pbe',dft_d='D3_BJ',
                 basis='cc-pvdz',GEOM_OPT_MAX_CYCLES='150',MAX_SCF_CYCLES='150',distort={'model':'xhcff','pressure':'50000','npoints_heavy':'302','npoints_hydrogen':'302','302','scaling':'1.0'},command='your command')
    mol2.calc = calc
    opt = QChemOptimizer(mol2)
    opt.run()
    ase.io.write('xhcff/50GB/%s.json'%(label),mol2)

    j=Jedi(mol,mol2,modes)
    j.run()
    j.vmd_gen()

In another folder the same for Ladenburg benzene:

.. code-block:: python

    import ase.io
    from ase.calculators.qchem import QChem
    from ase.vibrations.data import VibrationsData
    from jedi.jedi import Jedi
    from ase.calculators.qchem import QChemOptimizer
    from jedi.jedi.io.qchem import get_vibrations
    mol = ase.io.read('Ladenburg.xyz')

    label='opt'
    
    calc=QChem(jobtype='sp',label='xhcff/50GB/%s'%(label),          method='pbe',dft_d='D3_BJ',
                 basis='cc-pvdz',GEOM_OPT_MAX_CYCLES='150',USE_LIBQINTS='1',MAX_SCF_CYCLES='150',command='your command')
    mol.calc = calc
    opt = QChemOptimizer(mol)
    opt.run()


    label='freq'
    calc=QChem(jobtype='freq',label='xhcff/50GB/%s'%(label),          method='pbe',dft_d='D3_BJ',
                 basis='cc-pvdz',vibman_print= '7',command='your command')
    mol.calc = calc
    mol.calc.calculate(properties=['hessian'],atoms=mol)

    modes=get_vibrations(label,mol)

    label='force'
    mol2=ase.io.read('%s.json'%(label))
    calc=QChem(jobtype='sp',label='xhcff/50GB/%s'%(label),          method='pbe',dft_d='D3_BJ',
                 basis='cc-pvdz',GEOM_OPT_MAX_CYCLES='150',MAX_SCF_CYCLES='150',distort={'model':'xhcff','pressure':'50000','npoints_heavy':'302','npoints_hydrogen':'302','302','scaling':'1.0'},command='your command')
    mol2.calc = calc
    opt = QChemOptimizer(mol2)
    opt.run()
    ase.io.write('xhcff/50GB/%s.json'%(label),mol2)
    
    j=Jedi(mol,mol2,modes)
    j.run()
    j.vmd_gen()

.. image:: xhcff/prisxh.pdf
    :width: 20%

:download:`Dewar.xyz <xhcff/Dewar.xyz>`
:download:`Ladenburg.xyz <xhcff/Prisman.xyz>`


Graphene
--------

Analysing functional materials is of particular interest. Graphene is shown as an example.

.. code-block:: python


hcn
---

For this example the function needs to be modified so that C atoms are seen as possible acceptors.

:download:`get_hbond <hcn/dipole.py>`


.. code-block:: python

    from gpaw import GPAW , PW
    from ase.optimize import BFGS
    from ase.vibrations.vibrations import Vibrations
    import ase.io
    from ase.calculators.dftd3 import DFTD3

    from gpaw.analyse.vdwradii import vdWradii
    from ase.constraints import FixAtoms

    mol=ase.io.read('opt.json')
    convergence={'energy': 0.00001}


    calc=DFTD3(dft=GPAW(xc='PBE',mode=PW(700),kpts=[3,2,2],convergence=convergence),damping='bj')
    mol.calc=calc

    opt=BFGS(mol)
    opt.run(fmax=0.05)

    ase.io.write('opt.json',mol)
    #mol.set_constraint(FixAtoms([12,17,14,18,23,20,16,15,13,22,21,19,0,5,2,6,11,8,4,3,1,10,9,7]))


    calc=DFTD3(dft=GPAW(xc='PBE',mode=PW(700),kpts=[3,2,2],convergence=convergence,symmetry='off'),damping='bj')
    mol.calc=calc

    vib=Vibrations(mol)#),indices=[12,17,14,18,23,20,16,15,13,22,21,19,0,5,2,6,11,8,4,3,1,10,9,7])
    vib.run()
    vib.summary()
    modes=vib.get_vibrations()
    modes.write('modes.json')
    print(VibrationsData.read('modes.json').get_frequencies())

    from ase.vibrations.vibrations import VibrationsData
    modes=VibrationsData.read('modes.json')
    np.savetxt('freqtest',modes.get_frequencies())

    cell=mol.get_cell()
    cell[2][2]-=0.1
    mol.set_cell(cell)

    mol.calc=calc

    dis=BFGS(mol)
    dis.run(fmax=0.05)
    mol.set_constraint()
    ase.io.write('dis.json',mol)